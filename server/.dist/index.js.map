{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,2CAAoC;IAEpC,qCAA8B;IAE9B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAEzB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAC9B,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;IAExC,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC;IACrC,mBAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAE9B,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE;QAC/B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;YAC3B,gBAAM,CAAC,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;iBAC5G,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;IAI1C,iCAAiC;IACjC,4BAA4B;IAC5B,mEAAmE;IACnE,2DAA2D;IAC3D,yBAAyB;IACzB,QAAQ;IACR,6BAA6B;IAC7B,kDAAkD;IAElD,wBAAwB,EAAC,IAAI,EAAE,OAAO,EAAC;QACrC,MAAM,cAAc,GAAG,CAAC,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,KAAK,OAAO,CAAC,MAAM,iCAAiC,cAAc,OAAO,CAAC,CAAC;QAC9F,EAAE,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,GAAG,UAAU,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjK,CAAC;IAED,sBAAsB,EAAC,IAAI,EAAE,OAAO,EAAC;QACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,aAAa,EAAE;QACb,MAAM,CAAC,GAAG,CAAC,EAAE;YACX,EAAE,CAAC,GAAG,CAAC,CAAC;YACR,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC;IACJ,CAAC","file":"index.js","sourcesContent":["import webServer from './webServer';\n\nimport search from './search';\n\nconst ws = require('ws');\n\nconst port = process.argv[2] || 8181,\n      webPort = process.argv[3] || 8182;\n\nconst server = new ws.Server({port});\nwebServer('../.dev', webPort);\n\nserver.on('connection', socket => {\n  console.log('connected');\n  socket.on('message', query => {\n    search(query, ({name, results, start, end}) => socket.send(JSON.stringify({query, name, results, start, end})))\n      .catch(error => socket.send(JSON.stringify(['error', query, JSON.stringify(error.toString())])));\n  });\n});\n\nconsole.log('ws listening on', port);\nconsole.log('http listening on', webPort);\n\n\n\n// search('test', partialResults)\n//   .then(use(({urls}) => {\n//     const list = Object.keys(urls).map(url => [url, urls[url]]);\n//     list.sort(([_, a], [__, b]) => b.length - a.length);\n//     console.log(list);\n//   }))\n//   .then(use(printResults))\n//   .catch(error => console.log('error', error));\n\nfunction partialResults({name, results}) {\n  const resultsToPrint = 2;\n  console.log(`${name} (${results.length} total results [showing first ${resultsToPrint}]):\\n`);\n  if (results) console.log(`  ${results.slice(0, resultsToPrint).map(result => `${result.titles[0]} (${result.url})\\n    ${result.snippet}`).join('\\n\\n  ')}\\n`);\n}\n\nfunction printResults({urls, results}) {\n  console.log(urls);\n}\n\nfunction use(fn) {\n  return arg => {\n    fn(arg);\n    return arg;\n  };\n}"]}