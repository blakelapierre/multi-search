{"version":3,"sources":["webServer.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IACzB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAE7B,kBAAe,CAAC,SAAS,EAAE,IAAI,EAAE,EAAD;QAC9B,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,EAAE,GAAG;YAClC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;YAExC,YAAY;YACZ,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,mBAAmB;YACnB,IAAI,QAAQ,GAAG,GAAG,SAAS,KAAK,SAAS,CAAC,QAAQ,EAAE,CAAC;YACrD,yEAAyE;YACzE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC;YAChD,qCAAqC;YACrC,MAAM,GAAG,GAAG;gBACV,MAAM,EAAE,cAAc;gBACtB,OAAO,EAAE,WAAW;gBACpB,KAAK,EAAE,iBAAiB;gBACxB,OAAO,EAAE,kBAAkB;gBAC3B,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,YAAY;gBACpB,MAAM,EAAE,eAAe;gBACvB,MAAM,EAAE,iBAAiB;gBACzB,MAAM,EAAE,oBAAoB;aAC7B,CAAC;YAEF,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,KAAK;gBACjC,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,uCAAuC;oBACvC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;oBACrB,GAAG,CAAC,GAAG,CAAC,QAAQ,QAAQ,aAAa,CAAC,CAAC;oBACvC,MAAM,CAAC;gBACT,CAAC;gBAED,iEAAiE;gBACjE,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;oBAAC,QAAQ,IAAI,QAAQ,GAAG,GAAG,CAAC;gBAEpE,6BAA6B;gBAC7B,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAS,GAAG,EAAE,IAAI;oBACtC,EAAE,CAAA,CAAC,GAAG,CAAC,CAAA,CAAC;wBACN,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;wBACrB,GAAG,CAAC,GAAG,CAAC,2BAA2B,GAAG,GAAG,CAAC,CAAC;oBAC7C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,uDAAuD;wBACvD,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,YAAY,CAAE,CAAC;wBACzD,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAChB,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QAGL,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC","file":"webServer.js","sourcesContent":["const http = require('http');\nconst url = require('url');\nconst fs = require('fs');\nconst path = require('path');\n\nexport default (directory, port) {\n  http.createServer(function (req, res) {\n    console.log(`${req.method} ${req.url}`);\n\n    // parse URL\n    const parsedUrl = url.parse(req.url);\n    // extract URL path\n    let pathname = `${directory}/.${parsedUrl.pathname}`;\n    // based on the URL path, extract the file extention. e.g. .js, .doc, ...\n    const ext = path.parse(pathname).ext || '.html';\n    // maps file extention to MIME typere\n    const map = {\n      '.ico': 'image/x-icon',\n      '.html': 'text/html',\n      '.js': 'text/javascript',\n      '.json': 'application/json',\n      '.css': 'text/css',\n      '.png': 'image/png',\n      '.jpg': 'image/jpeg',\n      '.wav': 'audio/wav',\n      '.mp3': 'audio/mpeg',\n      '.svg': 'image/svg+xml',\n      '.pdf': 'application/pdf',\n      '.doc': 'application/msword'\n    };\n\n    fs.exists(pathname, function (exist) {\n      if(!exist) {\n        // if the file is not found, return 404\n        res.statusCode = 404;\n        res.end(`File ${pathname} not found!`);\n        return;\n      }\n\n      // if is a directory search for index file matching the extention\n      if (fs.statSync(pathname).isDirectory()) pathname += '/index' + ext;\n\n      // read file from file system\n      fs.readFile(pathname, function(err, data){\n        if(err){\n          res.statusCode = 500;\n          res.end(`Error getting the file: ${err}.`);\n        } else {\n          // if the file is found, set Content-type and send data\n          res.setHeader('Content-type', map[ext] || 'text/plain' );\n          res.end(data);\n        }\n      });\n    });\n\n\n  }).listen(parseInt(port));\n};"]}